Index: app.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from flask import Flask, render_template, request, redirect, url_for, flash\r\nfrom werkzeug.security import check_password_hash, generate_password_hash\r\n\r\nfrom models import User, Session, UserTypes, UserDetails\r\n\r\napp = Flask(__name__)\r\napp.secret_key = 'your_secret_key'\r\n\r\n@app.route('/')\r\ndef login():\r\n    return render_template('login.html')\r\n\r\n@app.route('/login', methods=['POST'])\r\ndef login_post():\r\n    username = request.form.get('username')\r\n    password = request.form.get('password')\r\n    session = Session()\r\n\r\n    user = session.query(User).filter_by(username=username).first()\r\n    session.close()\r\n\r\n    if user and check_password_hash(user.password, password):\r\n        return redirect(url_for('home'))\r\n    else:\r\n        flash('Invalid username or password')\r\n        return redirect(url_for('login'))\r\n\r\n@app.route('/signup')\r\ndef signup():\r\n    return render_template('signup.html')\r\n\r\n@app.route('/signup', methods=['POST'])\r\ndef signup_post():\r\n    username = request.form.get('username')\r\n    password = request.form.get('password')\r\n    name = request.form.get('name')\r\n    surname = request.form.get('surname')\r\n    email = request.form.get('email')\r\n    mobile_number = request.form.get('mobile_number')\r\n    address = request.form.get('address')\r\n    user_type_name = request.form.get('user_type')\r\n\r\n    session = Session()\r\n\r\n    existing_user = session.query(User).filter_by(username=username).first()\r\n    existing_email = session.query(UserDetails).filter_by(email=email).first()\r\n\r\n    if existing_user:\r\n        flash('Username already exists')\r\n        session.close()\r\n        return redirect(url_for('signup'))\r\n\r\n    if existing_email:\r\n        flash('Email already exists')\r\n        session.close()\r\n        return redirect(url_for('signup'))\r\n\r\n    user_type = session.query(UserTypes).filter_by(type_name=user_type_name).first()\r\n    if not user_type:\r\n        user_type = UserTypes(type_name=user_type_name)\r\n        session.add(user_type)\r\n        session.commit()\r\n\r\n    new_user = User(username=username, password=generate_password_hash(password))\r\n    session.add(new_user)\r\n    session.commit()\r\n\r\n    new_user_details = UserDetails(\r\n        user_id=new_user.id,\r\n        name=name,\r\n        surname=surname,\r\n        email=email,\r\n        mobile_number=mobile_number,\r\n        address=address,\r\n        user_type_id=user_type.id\r\n    )\r\n    session.add(new_user_details)\r\n    session.commit()\r\n    session.close()\r\n\r\n    flash('User registered successfully')\r\n    return redirect(url_for('login'))\r\n\r\n@app.route('/home')\r\ndef home():\r\n    return render_template('home.html')\r\n\r\nif __name__ == '__main__':\r\n    app.run(debug=True)\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app.py b/app.py
--- a/app.py	
+++ b/app.py	
@@ -1,86 +1,108 @@
 from flask import Flask, render_template, request, redirect, url_for, flash
 from werkzeug.security import check_password_hash, generate_password_hash
-
 from models import User, Session, UserTypes, UserDetails
 
 app = Flask(__name__)
 app.secret_key = 'your_secret_key'
 
-@app.route('/')
-def login():
-    return render_template('login.html')
-
-@app.route('/login', methods=['POST'])
-def login_post():
-    username = request.form.get('username')
-    password = request.form.get('password')
-    session = Session()
+@app.route('/login_new', methods=['GET', 'POST'])
+def login_new():
+    if request.method == 'POST':
+        username = request.form.get('username')
+        password = request.form.get('password')
+
+        session = Session()
 
-    user = session.query(User).filter_by(username=username).first()
-    session.close()
+        # Check if user exists
+        user = session.query(User).filter_by(username=username).first()
+
+        if user and check_password_hash(user.password, password):
+            session.close()
+            return redirect(url_for('home'))
+        else:
+            flash('Invalid username or password', 'error')
+            session.close()
+            return redirect(url_for('login_new'))
+
+    return render_template('login.html')
+
+
+@app.route('/', methods=['GET', 'POST'])
+def login():
+    if request.method == 'POST':
+        username = request.form.get('username')
+        password = request.form.get('password')
+
+        session = Session()
+
+        # Check if user exists
+        user = session.query(User).filter_by(username=username).first()
 
-    if user and check_password_hash(user.password, password):
-        return redirect(url_for('home'))
-    else:
-        flash('Invalid username or password')
-        return redirect(url_for('login'))
+        if user and check_password_hash(user.password, password):
+            session.close()
+            return redirect(url_for('home'))
+        else:
+            flash('Invalid username or password', 'error')
+            session.close()
+            return redirect(url_for('login_new'))
 
-@app.route('/signup')
+    return render_template('login.html')
+
+@app.route('/signup', methods=['GET', 'POST'])
 def signup():
-    return render_template('signup.html')
-
-@app.route('/signup', methods=['POST'])
-def signup_post():
-    username = request.form.get('username')
-    password = request.form.get('password')
-    name = request.form.get('name')
-    surname = request.form.get('surname')
-    email = request.form.get('email')
-    mobile_number = request.form.get('mobile_number')
-    address = request.form.get('address')
-    user_type_name = request.form.get('user_type')
+    if request.method == 'POST':
+        username = request.form.get('username')
+        password = request.form.get('password')
+        name = request.form.get('name')
+        surname = request.form.get('surname')
+        email = request.form.get('email')
+        mobile_number = request.form.get('mobile_number')
+        address = request.form.get('address')
+        user_type_name = request.form.get('user_type')
 
-    session = Session()
+        session = Session()
 
-    existing_user = session.query(User).filter_by(username=username).first()
-    existing_email = session.query(UserDetails).filter_by(email=email).first()
+        existing_user = session.query(User).filter_by(username=username).first()
+        existing_email = session.query(UserDetails).filter_by(email=email).first()
 
-    if existing_user:
-        flash('Username already exists')
-        session.close()
-        return redirect(url_for('signup'))
+        if existing_user:
+            flash('Username already exists', 'error')
+            session.close()
+            return redirect(url_for('signup'))
 
-    if existing_email:
-        flash('Email already exists')
-        session.close()
-        return redirect(url_for('signup'))
+        if existing_email:
+            flash('Email already exists', 'error')
+            session.close()
+            return redirect(url_for('signup'))
 
-    user_type = session.query(UserTypes).filter_by(type_name=user_type_name).first()
-    if not user_type:
-        user_type = UserTypes(type_name=user_type_name)
-        session.add(user_type)
-        session.commit()
+        user_type = session.query(UserTypes).filter_by(type_name=user_type_name).first()
+        if not user_type:
+            user_type = UserTypes(type_name=user_type_name)
+            session.add(user_type)
+            session.commit()
 
-    new_user = User(username=username, password=generate_password_hash(password))
-    session.add(new_user)
-    session.commit()
+        new_user = User(username=username, password=generate_password_hash(password))
+        session.add(new_user)
+        session.commit()
 
-    new_user_details = UserDetails(
-        user_id=new_user.id,
-        name=name,
-        surname=surname,
-        email=email,
-        mobile_number=mobile_number,
-        address=address,
-        user_type_id=user_type.id
-    )
-    session.add(new_user_details)
-    session.commit()
-    session.close()
+        new_user_details = UserDetails(
+            user_id=new_user.id,
+            name=name,
+            surname=surname,
+            email=email,
+            mobile_number=mobile_number,
+            address=address,
+            user_type_id=user_type.id
+        )
+        session.add(new_user_details)
+        session.commit()
+        session.close()
 
-    flash('User registered successfully')
-    return redirect(url_for('login'))
+        flash('User registered successfully', 'success')
+        return redirect(url_for('login'))
 
+    return render_template('signup.html')
+
 @app.route('/home')
 def home():
     return render_template('home.html')
Index: templates/login.html
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n    <title>Login Page</title>\r\n    <link rel=\"stylesheet\" href=\"login_style.css\">\r\n</head>\r\n<body>\r\n    <div class=\"login-container\">\r\n        <h2>Login</h2>\r\n        <form action=\"/login\" method=\"post\" novalidate>\r\n            <div class=\"input-group\">\r\n                <label for=\"username\">Username</label>\r\n                <input type=\"text\" id=\"username\" name=\"username\" required minlength=\"3\" maxlength=\"20\">\r\n                <small class=\"error-message\" id=\"username-error\"></small>\r\n            </div>\r\n            <div class=\"input-group\">\r\n                <label for=\"password\">Password</label>\r\n                <input type=\"password\" id=\"password\" name=\"password\" required minlength=\"6\" maxlength=\"20\">\r\n                <small class=\"error-message\" id=\"password-error\"></small>\r\n            </div>\r\n            <button type=\"submit\">Login</button>\r\n            <div class=\"forgot-password\">\r\n                <a href=\"./forgot_password.html\">Forgot Password?</a>\r\n            </div>\r\n            <div class=\"signup-link\">\r\n                <a href=\"./signup.html\">Don't have an account? Sign up here</a>\r\n            </div>\r\n        </form>\r\n    </div>\r\n    <script src=\"login_script.js\"></script>\r\n</body>\r\n</html>\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/templates/login.html b/templates/login.html
--- a/templates/login.html	
+++ b/templates/login.html	
@@ -4,12 +4,24 @@
     <meta charset="UTF-8">
     <meta name="viewport" content="width=device-width, initial-scale=1.0">
     <title>Login Page</title>
-    <link rel="stylesheet" href="login_style.css">
+    <link rel="stylesheet" href="{{ url_for('static', filename='login_style.css') }}">
 </head>
 <body>
     <div class="login-container">
         <h2>Login</h2>
-        <form action="/login" method="post" novalidate>
+
+        <!-- Flash Messages -->
+        {% with messages = get_flashed_messages(with_categories=true) %}
+            {% if messages %}
+                <ul class="flashes">
+                    {% for category, message in messages %}
+                        <li class="{{ category }}">{{ message }}</li>
+                    {% endfor %}
+                </ul>
+            {% endif %}
+        {% endwith %}
+
+        <form action="/" method="post" novalidate>
             <div class="input-group">
                 <label for="username">Username</label>
                 <input type="text" id="username" name="username" required minlength="3" maxlength="20">
@@ -29,6 +41,6 @@
             </div>
         </form>
     </div>
-    <script src="login_script.js"></script>
+    <script src="{{ url_for('static', filename='login_script.js') }}"></script>
 </body>
 </html>
Index: add_user.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from models import User, Session\r\n\r\nsession = Session()\r\n\r\n# Add a sample user\r\nnew_user = User(username=\"testuser\", password=\"testpassword\")\r\nsession.add(new_user)\r\nsession.commit()\r\nsession.close()
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/add_user.py b/add_user.py
--- a/add_user.py	
+++ b/add_user.py	
@@ -1,9 +1,36 @@
-from models import User, Session
+from models import User, UserDetails, UserTypes, Session
+from werkzeug.security import generate_password_hash
 
-session = Session()
+def add_user(username, password, name, surname, email, mobile_number, address, user_type_name):
+    session = Session()
 
-# Add a sample user
-new_user = User(username="testuser", password="testpassword")
-session.add(new_user)
-session.commit()
-session.close()
\ No newline at end of file
+    # Check if the user type exists, if not, create it
+    user_type = session.query(UserTypes).filter_by(type_name=user_type_name).first()
+    if not user_type:
+        user_type = UserTypes(type_name=user_type_name)
+        session.add(user_type)
+        session.commit()
+
+    # Create the user
+    new_user = User(username=username, password=generate_password_hash(password))
+    session.add(new_user)
+    session.commit()
+
+    # Create the user details
+    new_user_details = UserDetails(
+        user_id=new_user.id,
+        name=name,
+        surname=surname,
+        email=email,
+        mobile_number=mobile_number,
+        address=address,
+        user_type_id=user_type.id
+    )
+    session.add(new_user_details)
+    session.commit()
+    session.close()
+
+    print(f"User {username} added successfully.")
+
+if __name__ == '__main__':
+    add_user('testuser', 'testpassword', 'Test', 'User', 'testuser@example.com', '1234567890', '123 Test St', 'Regular')
